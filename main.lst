#[1]   main.asm
   27           2000      	.zp
   28                     	
   29  --:2000            string:
   30  --:2000            	.ds 2
   31                     
   32           E000      	.data
   33                     
   34           E000      	.code
   35           0000      	.bank   0
   36           4070      	.org    $4070
   37                     
   38                     ;
   39                     ;
   40                     ;
   41  00:4070            boot:
   42  00:4070  20 99 E0  	jsr     ex_dspoff
   43  00:4073  20 81 E0  	jsr     ex_rcroff
   44  00:4076  20 87 E0  	jsr     ex_irqoff
   45  00:4079  20 30 E0  	jsr     ad_reset
   46                     
   47  00:407C  20 A7 41  	jsr     init_vce
   48                     
   49                     	stw     #boot_video_mode,_ax
       00:407F  A9 D7     	lda	LOW_BYTE #boot_video_mode
       00:4081  8D F8 20  	sta	LOW_BYTE _ax
       00:4084  A9 41     	lda	HIGH_BYTE #boot_video_mode
       00:4086  8D F9 20  	sta	HIGH_BYTE _ax
   50  00:4089  20 8C 41  	jsr     init_vdc
   51                     				
   52  00:408C  20 96 E0  	jsr     ex_dspon
   53  00:408F  20 7E E0  	jsr     ex_rcron
   54  00:4092  20 84 E0  	jsr     ex_irqon
   55                     
   56  00:4095  20 7B E0  	jsr     ex_vsync
   57  00:4098  20 7B E0  	jsr     ex_vsync
   58                     	
   59                     	;load catgirl image and palette from CD
   60  00:409B  64 FC     	stz <_cl ;sector number (bits 24-16)
   61  00:409D  A9 00     	lda #HIGH(_ADDR_art) ;sector number (bits 15-8)
   62  00:409F  85 FD     	sta <_ch
   63  00:40A1  A9 0E     	lda #LOW(_ADDR_art) ;sector number (bits 7-0)
   64  00:40A3  85 FE     	sta <_dl
   65  00:40A5  A9 02     	lda #2 ;write to a bank
   66  00:40A7  85 FF     	sta <_dh
   67  00:40A9  A9 81     	lda #$81 ;write starting at bank $81
   68  00:40AB  85 FA     	sta <_bl
   69  00:40AD  A9 08     	lda #8 ;write 8 sectors
   70  00:40AF  85 F8     	sta <_al
   71  00:40B1  20 09 E0  	jsr cd_read
   72                     	
   73                     	;play track from CD
   74  00:40B4  A9 80     	lda #$80 ;play track number
   75  00:40B6  85 FB     	sta <_bh
   76  00:40B8  A9 02     	lda #2 ;track number to play
   77  00:40BA  85 F8     	sta <_al
   78  00:40BC  A9 80     	lda #$80 ;stop on track number
   79  00:40BE  85 FF     	sta <_dh
   80  00:40C0  A9 03     	lda #3 ;track number to stop on
   81  00:40C2  85 FC     	sta <_cl
   82  00:40C4  A9 01     	lda #1 ;infinite repeat play
   83  00:40C6  85 FF     	sta <_dh
   84  00:40C8  20 12 E0  	jsr cd_play
   85                     
   86                     	;copy catgirl palette
   87                     	stw     #CatgirlPal,<_ax
       00:40CB  A9 00     	lda	LOW_BYTE #CatgirlPal
       00:40CD  85 F8     	sta	LOW_BYTE <_ax
       00:40CF  A9 80     	lda	HIGH_BYTE #CatgirlPal
       00:40D1  85 F9     	sta	HIGH_BYTE <_ax
   88                     	stw     #$0000,VCE_ADDR_LO
       00:40D3  A9 00     	lda	LOW_BYTE #$0000
       00:40D5  8D 02 04  	sta	LOW_BYTE VCE_ADDR_LO
       00:40D8  A9 00     	lda	HIGH_BYTE #$0000
       00:40DA  8D 03 04  	sta	HIGH_BYTE VCE_ADDR_LO
   89  00:40DD  20 C5 41  	jsr     copy_palette
   90                     
   91                     	;clear tilemap
   92                     	vreg #VDC_MAWR
       00:40E0  A9 00     	lda	#VDC_MAWR
       00:40E2  85 F7     	sta	<vdc_reg
                0001      .if (2 = ARG_IMMED)
       00:40E4  03 00     	st0	#VDC_MAWR
                          .else
                          .endif
   93                     	stwz video_data
       00:40E6  9C 02 00  	stz	LOW_BYTE video_data
       00:40E9  9C 03 00  	stz	HIGH_BYTE video_data
   94                     	vreg #VDC_VWR
       00:40EC  A9 02     	lda	#VDC_VWR
       00:40EE  85 F7     	sta	<vdc_reg
                0001      .if (2 = ARG_IMMED)
       00:40F0  03 02     	st0	#VDC_VWR
                          .else
                          .endif
   95  00:40F2  A2 40     	ldx #64 ;max tilemap size is 64x64
   96  00:40F4  A0 40     	ldy #64
   97  00:40F6            .clr_loop:	
   98                     	stw #$200,video_data
       00:40F6  A9 00     	lda	LOW_BYTE #$200
       00:40F8  8D 02 00  	sta	LOW_BYTE video_data
       00:40FB  A9 02     	lda	HIGH_BYTE #$200
       00:40FD  8D 03 00  	sta	HIGH_BYTE video_data
   99  00:4100  CA        	dex
  100  00:4101  D0 F3     	bne .clr_loop
  101  00:4103  A2 40     	ldx #64
  102  00:4105  88        	dey
  103  00:4106  D0 EE     	bne .clr_loop
  104                     	;copy catgirl image
  105                     	vreg #VDC_MAWR
       00:4108  A9 00     	lda	#VDC_MAWR
       00:410A  85 F7     	sta	<vdc_reg
                0001      .if (2 = ARG_IMMED)
       00:410C  03 00     	st0	#VDC_MAWR
                          .else
                          .endif
  106                     	stw #$2000,video_data
       00:410E  A9 00     	lda	LOW_BYTE #$2000
       00:4110  8D 02 00  	sta	LOW_BYTE video_data
       00:4113  A9 20     	lda	HIGH_BYTE #$2000
       00:4115  8D 03 00  	sta	HIGH_BYTE video_data
  107                     	vreg #VDC_VWR
       00:4118  A9 02     	lda	#VDC_VWR
       00:411A  85 F7     	sta	<vdc_reg
                0001      .if (2 = ARG_IMMED)
       00:411C  03 02     	st0	#VDC_VWR
                          .else
                          .endif
  108  00:411E  E3 00 60  	tia Catgirl,video_data,$2000
       00:4121  02 00 00  
       00:4124  20        
  109                     	;tilemap
  110                     	vreg #VDC_MAWR
       00:4125  A9 00     	lda	#VDC_MAWR
       00:4127  85 F7     	sta	<vdc_reg
                0001      .if (2 = ARG_IMMED)
       00:4129  03 00     	st0	#VDC_MAWR
                          .else
                          .endif
  111                     	stw #8,video_data ;$0 is the tilemap address in vram
       00:412B  A9 08     	lda	LOW_BYTE #8
       00:412D  8D 02 00  	sta	LOW_BYTE video_data
       00:4130  A9 00     	lda	HIGH_BYTE #8
       00:4132  8D 03 00  	sta	HIGH_BYTE video_data
  112                     	vreg #VDC_VWR
       00:4135  A9 02     	lda	#VDC_VWR
       00:4137  85 F7     	sta	<vdc_reg
                0001      .if (2 = ARG_IMMED)
       00:4139  03 02     	st0	#VDC_VWR
                          .else
                          .endif
  113  00:413B  A2 10     	ldx #$10 ;image is 16x16 tiles
  114  00:413D  A0 10     	ldy #$10
  115                     	stw #$200,<_si ;start of image in tiles
       00:413F  A9 00     	lda	LOW_BYTE #$200
       00:4141  85 EE     	sta	LOW_BYTE <_si
       00:4143  A9 02     	lda	HIGH_BYTE #$200
       00:4145  85 EF     	sta	HIGH_BYTE <_si
  116                     	stw #8,<_ax ;vram address to write to
       00:4147  A9 08     	lda	LOW_BYTE #8
       00:4149  85 F8     	sta	LOW_BYTE <_ax
       00:414B  A9 00     	lda	HIGH_BYTE #8
       00:414D  85 F9     	sta	HIGH_BYTE <_ax
  117  00:414F            .loop:
  118                     	stw <_si,video_data
       00:414F  A5 EE     	lda	LOW_BYTE <_si
       00:4151  8D 02 00  	sta	LOW_BYTE video_data
       00:4154  A5 EF     	lda	HIGH_BYTE <_si
       00:4156  8D 03 00  	sta	HIGH_BYTE video_data
  119                     	incw <_si
       00:4159  E6 EE     	inc	<_si		; value at stated memory
       00:415B  D0 02     	bne	.x_00017		; location
       00:415D  E6 EF     	inc	<_si+1
       00:415F            .x_00017:
  120  00:415F  CA        	dex
  121  00:4160  D0 ED     	bne .loop
  122                     	;32x32 tilemap
  123                     	addw #$20,<_ax
                0000      .if	(2 = 3)
                          .else
                          	; 2-arg mode
                          	;
       00:4162  18        	clc
       00:4163  A5 F8     	lda	LOW_BYTE <_ax
       00:4165  69 20     	adc	LOW_BYTE #$20
       00:4167  85 F8     	sta	LOW_BYTE <_ax
       00:4169  A5 F9     	lda	HIGH_BYTE <_ax
       00:416B  69 00     	adc	HIGH_BYTE #$20
       00:416D  85 F9     	sta	HIGH_BYTE <_ax
                          .endif
  124                     	vreg #VDC_MAWR
       00:416F  A9 00     	lda	#VDC_MAWR
       00:4171  85 F7     	sta	<vdc_reg
                0001      .if (2 = ARG_IMMED)
       00:4173  03 00     	st0	#VDC_MAWR
                          .else
                          .endif
  125                     	stw <_ax,video_data
       00:4175  A5 F8     	lda	LOW_BYTE <_ax
       00:4177  8D 02 00  	sta	LOW_BYTE video_data
       00:417A  A5 F9     	lda	HIGH_BYTE <_ax
       00:417C  8D 03 00  	sta	HIGH_BYTE video_data
  126                     	vreg #VDC_VWR
       00:417F  A9 02     	lda	#VDC_VWR
       00:4181  85 F7     	sta	<vdc_reg
                0001      .if (2 = ARG_IMMED)
       00:4183  03 02     	st0	#VDC_VWR
                          .else
                          .endif
  127  00:4185  A2 10     	ldx #$10
  128  00:4187  88        	dey
  129  00:4188  D0 C5     	bne .loop
  130                     	
  131                     	;main loop
  132  00:418A            main:
  133  00:418A  80 FE     	bra main
  134                     ; ***************************************************************************
  135                     ; ***************************************************************************
  136                     ;
  137                     ;
  138                     
  139                     
  140  00:418C            init_vdc:
  141  00:418C  08        	php
  142  00:418D  78        	sei
  143  00:418E  C2        	cly
  144  00:418F            .loop:
  145  00:418F  B1 F8     	lda     [_ax],y
  146  00:4191  F0 12     	beq     .done
  147  00:4193  8D 00 00  	sta     VDC_CTRL
  148  00:4196  C8        	iny
  149  00:4197  B1 F8     	lda     [_ax],y
  150  00:4199  8D 02 00  	sta     VDC_DATA_LO
  151  00:419C  C8        	iny
  152  00:419D  B1 F8     	lda     [_ax],y
  153  00:419F  8D 03 00  	sta     VDC_DATA_HI
  154  00:41A2  C8        	iny
  155  00:41A3  80 EA     	bra     .loop
  156  00:41A5            .done:
  157  00:41A5  28        	plp
  158  00:41A6  60        	rts
  159                     
  160                     
  161                     ; ***************************************************************************
  162                     ; ***************************************************************************
  163                     ;
  164                     ;
  165                     
  166  00:41A7            init_vce:
  167  00:41A7  08        	php
  168  00:41A8  78        	sei
  169  00:41A9  9C 02 04  	stz     VCE_ADDR_LO
  170  00:41AC  9C 03 04  	stz     VCE_ADDR_HI
  171  00:41AF  A0 02     	ldy     #$02
  172  00:41B1  82        	clx
  173  00:41B2            .loop:
  174  00:41B2  9C 04 04  	stz     VCE_DATA_LO
  175  00:41B5  9C 05 04  	stz     VCE_DATA_HI
  176  00:41B8  CA        	dex
  177  00:41B9  D0 F7     	bne     .loop
  178  00:41BB  88        	dey
  179  00:41BC  D0 F4     	bne     .loop
  180  00:41BE  A9 00     	lda     #VCE_CR_5MHz
  181  00:41C0  8D 00 04  	sta     VCE_CTRL
  182  00:41C3  28        	plp
  183  00:41C4  60        	rts
  184                     
  185                     
  186                     ; ***************************************************************************
  187                     ; ***************************************************************************
  188                     ;
  189                     ;
  190                     
  191  00:41C5            copy_palette:   
  192  00:41C5  C2        	cly
  193  00:41C6            .loop:
  194  00:41C6  B1 F8     	lda     [_ax],y
  195  00:41C8  C8        	iny
  196  00:41C9  8D 04 04  	sta     VCE_DATA_LO
  197  00:41CC  B1 F8     	lda     [_ax],y
  198  00:41CE  C8        	iny
  199  00:41CF  8D 05 04  	sta     VCE_DATA_HI
  200  00:41D2  C0 20     	cpy     #32
  201  00:41D4  D0 F0     	bne     .loop
  202  00:41D6  60        	rts
  203                     
  204                     
  205                     ; ***************************************************************************
  206                     ; ***************************************************************************
  207                     
  208                     ; VDC constants for 240 & 256 wide display.
  209                     
  210           0000      VCE_CR_5MHz  = $00
  211                     
  212           0302      VDC_HSR_240  = $0302
  213           041D      VDC_HDR_240  = $041D
  214                     
  215           0202      VDC_HSR_256  = $0202
  216           041F      VDC_HDR_256  = $041F
  217                     
  218                     ; VDC constants for 320 & 336 wide display.
  219                     
  220           0001      VCE_CR_7MHz  = $01
  221                     
  222           0502      VDC_HSR_320  = $0502
  223           0427      VDC_HDR_320  = $0427
  224                     
  225           0402      VDC_HSR_336  = $0402
  226           0429      VDC_HDR_336  = $0429
  227                     
  228                     ; VDC constants for 480 & 512 wide display.
  229                     
  230           0002      VCE_CR_10MHz = $02
  231                     
  232           0C02      VDC_HSR_480  = $0C02
  233           043C      VDC_HDR_480  = $043C
  234                     
  235           0B02      VDC_HSR_512  = $0B02
  236           043F      VDC_HDR_512  = $043F
  237                     
  238                     ; VDC constants for 200, 224 & 240 high display.
  239                     
  240           2302      VDC_VPR_200  = $2302
  241           00C7      VDC_VDW_200  = $00C7
  242           0018      VDC_VCR_200  = $0018
  243                     
  244           1702      VDC_VPR_224  = $1702
  245           00DF      VDC_VDW_224  = $00DF
  246           000C      VDC_VCR_224  = $000C
  247                     
  248           0F02      VDC_VPR_240  = $0F02
  249           00EF      VDC_VDW_240  = $00EF
  250           0004      VDC_VCR_240  = $0004 ; $00F6
  251                     
  252                     ; VDC constants for different BAT screen sizes.
  253                     
  254           0000      VDC_MWR_32x32  = $0000
  255           0040      VDC_MWR_32x64  = $0040
  256                     
  257           0010      VDC_MWR_64x32  = $0010
  258           0050      VDC_MWR_64x64  = $0050
  259                     
  260           0020      VDC_MWR_128x32 = $0020
  261           0060      VDC_MWR_128x64 = $0060
  262                     
  263                     ; Table of VDC values to set on boot.
  264                     
  265  00:41D7            boot_video_mode:
  266  00:41D7  05        	.db     VDC_CR                  ; Control Register
  267  00:41D8  00 00     	.dw     $0000
  268  00:41DA  06        	.db     VDC_RCR                 ; Raster Counter Register
  269  00:41DB  00 00     	.dw     $0000
  270  00:41DD  07        	.db     VDC_BXR                 ; Background X-Scroll Register
  271  00:41DE  00 00     	.dw     $0000
  272  00:41E0  08        	.db     VDC_BYR                 ; Background Y-Scroll Register
  273  00:41E1  00 00     	.dw     $0000
  274  00:41E3  09        	.db     VDC_MWR                 ; Memory-access Width Register
  275  00:41E4  00 00     	.dw     VDC_MWR_32x32
  276  00:41E6  0A        	.db     VDC_HSR                 ; Horizontal Sync Register
  277  00:41E7  02 02     	.dw     VDC_HSR_256
  278  00:41E9  0B        	.db     VDC_HDR                 ; Horizontal Display Register
  279  00:41EA  1F 04     	.dw     VDC_HDR_256
  280  00:41EC  0C        	.db     VDC_VPR                 ; Vertical Sync Register
  281  00:41ED  02 17     	.dw     VDC_VPR_224
  282  00:41EF  0D        	.db     VDC_VDW                 ; Vertical Display Register
  283  00:41F0  DF 00     	.dw     VDC_VDW_224
  284  00:41F2  0E        	.db     VDC_VCR                 ; Vertical Display END position Register
  285  00:41F3  0C 00     	.dw     VDC_VCR_224
  286  00:41F5  0F        	.db     VDC_DCR                 ; DMA Control Register
  287  00:41F6  10 00     	.dw     $0010
  288  00:41F8  13        	.db     VDC_SATB                ; SATB  address of the SATB
  289  00:41F9  7F 00     	.dw     $007F
  290  00:41FB  00        	.db     0
  291                     	
  292           0001      	.bank 1
  293           6000      	.org $6000
  294  01:6000            Catgirl:
  295                     	; .incchr "gfx\catgirl.pcx"
  296                     	
  297           0002      	.bank 2
  298           8000      	.org $8000
  299  02:8000            CatgirlPal:
  300                     	; .incpal "gfx\catgirl.pcx",0,1
